<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <module name="SuppressWarningsFilter"/>

    <property name="charset" value="UTF-8"/>


    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/filefilters/index.html -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>
    <!-- https://checkstyle.org/filters/suppressionfilter.html -->
    <module name="SuppressionFilter">
        <property name="file" value="${org.checkstyle.google.suppressionfilter.config}"
                  default="checkstyle-suppressions.xml" />
        <property name="optional" value="true"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.org/checks/whitespace/index.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="FileLength">
        <property name="max" value="2500" />
    </module>
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="200"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <module name="AvoidStarImport" />
        <module name="IllegalImport" />
        <!-- 不必要导入的类 -->
        <module name="RedundantImport" />
        <module name="UnusedImports" />

        <!-- Checks the padding of an empty for iterator; that is whether a white space is required at an empty for iterator, or such white space is forbidden. -->
        <module name="EmptyForIteratorPad" />
        <!-- Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. -->
        <module name="MethodParamPad" />
        <!-- Checks that there is no whitespace after a token. -->
        <module name="NoWhitespaceAfter" />
        <!-- Checks that there is no whitespace before a token. -->
        <module name="NoWhitespaceBefore" />
        <!-- Checks the policy on how to wrap lines on operators. -->
        <module name="OperatorWrap" />
        <!-- Checks the policy on the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden. -->
        <module name="ParenPad" />
        <!-- Checks the policy on the padding of parentheses for typecasts. -->
        <module name="TypecastParenPad" />
        <!-- Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator. -->
        <module name="WhitespaceAfter" />
        <!-- Checks that a token is surrounded by whitespace. -->
<!--        <module name="WhitespaceAround" />-->

        <!-- Checks for braces around code blocks. -->
        <module name="NeedBraces" />

        <!-- Ensures that identifies classes that can be effectively declared as final are explicitly marked as final. -->
        <module name="FinalClass"/>

        <!-- Checks that classes that either override equals() or hashCode() also overrides the other. -->
        <module name="EqualsHashCode" />
        <!-- Checks for illegal instantiations where a factory method is preferred. -->
        <module name="IllegalInstantiation" />
        <!-- Checks for over-complicated boolean expressions. -->
        <module name="SimplifyBooleanExpression" />
        <!-- Checks for over-complicated boolean return statements.  -->
        <module name="SimplifyBooleanReturn" />
        <!-- Checks that each variable declaration is in its own statement and on its own line. -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Checks that switch statement has a default clause. -->
        <module name="MissingSwitchDefault" />
        <!-- Checks for fall-through in switch statements. Finds locations where a case contains Java code but lacks a break, return, yield, throw or continue statement. -->
        <module name="FallThrough" />
        <!-- Checks that string literals are not used with == or !=.  -->
        <module name="StringLiteralEquality" />
        <!-- Restricts nested if-else blocks to a specified depth. -->
        <module name="NestedIfDepth">
            <property name="max" value="4" />
        </module>
        <!-- Restricts nested try-catch-finally blocks to a specified depth. -->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>
        <!-- Restricts the number of return statements in methods, constructors and lambda expressions. Ignores specified methods (equals by default). -->
        <module name="ReturnCount">
            <property name="max" value="8" />
            <property name="format" value="^$"/>
            <property name="maxForVoid" value="4" />
        </module>

        <!-- Checks that local final variable names conform to a specified pattern. A catch parameter and resources in try statements are considered to be a local, final variables. -->
        <module name="LocalFinalVariableName" />
        <!-- Checks that local, non-final variable names conform to a specified pattern. A catch parameter is considered to be a local variable. -->
        <module name="LocalVariableName" />
        <!-- Checks that static, non-final variable names conform to a specified pattern. -->
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,50}$)"/>
        </module>
        <!-- Checks that package names conform to a specified pattern. -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <!-- Checks that type names conform to a specified pattern. -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]*$)"/>
        </module>
        <!-- Checks that method names conform to a specified pattern. -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]*$)"/>
        </module>
        <!-- Checks that instance variable names conform to a specified pattern. -->
        <module name="MemberName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]*$)"/>
        </module>
        <!-- Checks that method parameter names conform to a specified pattern. -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]*$)"/>
        </module>
        <!-- Checks that constant names conform to a specified pattern.  -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,50}$)"/>
        </module>

        <!-- Checks the style of array type definitions.  -->
        <module name="ArrayTypeStyle" />
        <!-- Checks for TODO: comments.  -->
        <module name="TodoComment" />
        <!-- Checks that long constants are defined with an upper ell. -->
        <module name="UpperEll" />

        <!-- Checks the number of parameters of a method or constructor. -->
        <module name="ParameterNumber">
            <property name="max" value="8"/>
        </module>
        <!-- Checks for long methods and constructors. -->
        <module name="MethodLength">
            <property name="max" value="300"/>
        </module>

        <module name="ModifierOrder" />
        <!-- Checks for redundant modifiers. -->
        <module name="RedundantModifier" />

    </module>
</module>