apply plugin: 'jacoco'

ext {
    jacocoLineMin = 0.75
    jacocoBranchMin = 0.85
    jacocoExcludes = [
        "**/StartApplication*",
        "**/GlobalExceptionHandler*",
        "**/exception/**",
        "**/dto/**",
        "**/po/**",
        "**/infrastructure/**",
        "**/converter/**",
        "**/common/**",
        "**/config/**",
        "**/authserver/**",
        "**/resourceserver/**",
        "**/principal/**",
        "**/*Entity.class",
        "**/command/**",
        "**/*Converter**",
        "**/*Mapper*",
        "**/*DTO.class",
        "**/*PO.class"
    ]
}

task jacocoAllTestReport(type: JacocoReport) {
    group 'verification'
    shouldRunAfter check

    dependsOn(subprojects.test)

    sourceDirectories.setFrom(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom(subprojects.sourceSets.main.output)
    executionData.setFrom(subprojects.jacocoTestReport.executionData)

    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
}

task jacocoAllTestCoverageVerification(type: JacocoCoverageVerification) {
    group 'verification'
    shouldRunAfter check

    dependsOn jacocoAllTestReport

    sourceDirectories.setFrom(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom(subprojects.sourceSets.main.output)
    executionData.setFrom(subprojects.jacocoTestReport.executionData)

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }

    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                minimum = jacocoLineMin
            }
        }

        rule {
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = jacocoBranchMin
            }
        }
    }
}

check {
    dependsOn jacocoAllTestReport
    dependsOn jacocoAllTestCoverageVerification
}